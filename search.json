[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core – Basic Contacts",
    "section": "",
    "text": "Contact\n\n Contact (person:tybed_contact.db.Person, email:str)\n\nCreate a contact from a Person and Email\n\n\n\n\nType\nDetails\n\n\n\n\nperson\nPerson\nPerson of the contact\n\n\nemail\nstr\nEmail of the contact\n\n\n\nHere’s an example of creating and displaying a contact\n\ni = Contact(Person(first_name=\"ifan\", last_name=\"johnston\", occupation=\"software dev\"), \"ifan.johnston@gmail.com\")\ni\n\nifan johnston (ifan.johnston@gmail.com) [software dev]\n\n\n\ni = Contact(Person(first_name=\"ifan\", last_name=\"johnston\"), \"ifan.johnston@gmail.com\")\ni\n\nifan johnston (ifan.johnston@gmail.com)\n\n\n\ntest_eq(i.name, \"ifan johnston\")\ntest_eq(i.email, \"ifan.johnston@gmail.com\")\n\nYou can check equality of contacts:\n\ntest_eq(i, Contact(Person(first_name='ifan', last_name='johnston'), \"ifan.johnston@gmail.com\"))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tybed_contact",
    "section": "",
    "text": "Save your contacts from the terminal!"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "tybed_contact",
    "section": "Install",
    "text": "Install\npip install tybed_contact"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "tybed_contact",
    "section": "How to use",
    "text": "How to use\nHere’s how you create and disaply a Contact from python:\n\n# c = Contact(\"ifan\", \"ifan@example.email\")\n# c\n\nifan (ifan@example.email)\n\n\n\n# session = get_session()\n\nNameError: name 'get_session' is not defined\n\n\n\n# people = read_persons(session)"
  },
  {
    "objectID": "db.html",
    "href": "db.html",
    "title": "db – Database interace",
    "section": "",
    "text": "PersonUpdate\n\n PersonUpdate (first_name:str='', last_name:str='', occupation:str='')\n\nVersion of Person for updating in the db\n\n\n\nPersonCreate\n\n PersonCreate (first_name:str, last_name:str='', occupation:str='')\n\nBase model for Person\n\n\n\nPersonRead\n\n PersonRead (first_name:str, last_name:str='', occupation:str='', id:int)\n\nVersion of Person for reading from the db\n\n\n\nPerson\n\n Person (first_name:str, last_name:str='', occupation:str='', id:int=None)\n\nPerson model containing an id, doubling up as the database model\n\n\n\nPersonBase\n\n PersonBase (first_name:str, last_name:str='', occupation:str='')\n\nBase model for Person\n\n\ncreate_persons\n\n create_persons ()\n\nCreate Persons add add to the database just so that it isn’t empty\n\n\n\ncreate_db_and_tables\n\n create_db_and_tables ()\n\nFunction which first creates the tables from the meta data generated by defining the SQLModels above.\n\n\n\nread_persons\n\n read_persons (offset:int=0, limit:int=100)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\noffset\nint\n0\nOffset to read from.\n\n\nlimit\nint\n100\nMaximum index to read to.\n\n\nReturns\nList\n\n\n\n\n\n\n\n\ncreate_person\n\n create_person (person:__main__.PersonCreate)\n\nAdd a person to the database\n\n\n\n\nType\nDetails\n\n\n\n\nperson\nPersonCreate\nAn SQLModel for creating a Person\n\n\nReturns\nPersonRead\n\n\n\n\n\ncreate_db_and_tables()\n\n\nread_persons()\n\n[Person(last_name='johnston', occupation='dev', first_name='ifan', id=1),\n Person(last_name='johnston', occupation='dev', first_name='ifan', id=2),\n Person(last_name='johnston2', occupation='researcher', first_name='ifan2', id=3)]"
  }
]